package src.view;

import java.awt.event.KeyEvent;
import javax.swing.JDialog;

/**
 * This class will Display a dialog informing the user about JLogger
 * 
 * @author Brenda Medina
 */
public class AboutJLogger extends javax.swing.JPanel
{
    
    /**
     * The dialog that we're displaying
     */
    private JDialog myDialog;

    /**
     * The parameterized constructor displays the dialog
     * 
     * @param logger the JLogger that this dialog will associated with
     */
    public AboutJLogger(JLogger logger)
    {
   
        initComponents();
        
        //Display the JDialog
        myDialog = new JDialog(logger, "About JLogger", true);
        myDialog.setContentPane(this);
        myDialog.pack();
        //myDialog.setResizable(false);
        myDialog.setLocationRelativeTo(logger);
        String about = "JLogger is a Java version of the VHMsg message logger.\n\n" +
                        "Jlogger allows you to do the following:\n\n" +
                        "CREATE FILTERS\n" +
                        "Filters will search through the messages and display only those that satisfy the filter.\n" +
                        "Filters are not case sensitive and will search the entire message.\n" +
                        "You can create positive(contains) or negative(does not contain) filters\n" +
                        "For the advanced (multi-statement) filters the 'and' and 'or' option is given.\n" +
                        "\t-'And' implies that a message satisfies the advanced filter only if it satisfies every single-statement filter.\n" +
                        "\t-'or' imples that a message satisfies the advanced filter if it satisfies at least one of the single-statement filters.\n\n" +
                        "SAVE\n" +
                        "you can save all the messages that have been received.\n" +
                        "You can save the messages in a given filter.\n\n" +
                        "IMPORT\n" +
                        "You can import messages but they must have been logged by JLogger.\n\n" +
                        "LOG\n" +
                        "You can start, and stop a log session.\n" +
                        "You can name your log session (which will influence the naming conventions of the logging files and directories).\n\n" +
                        "SEARCH\n" +
                        "You can search backward or forward through the messages by keyword.\n\n" +
                        "OTHER OPTIONS\n" +
                        "You can select whether you want the messages to have an autoscroll property or not.\n" +
                        "You can select whether you want to messages to have the word wrap porperty or not.\n" +
                        "You can clear the messages(log).\n" +
                        "You can change the Session name or reset it to the default session name.\n" +
                        "You can obtain the default session name.\n" +
                        "You can, if JLogger is currently logging, obtain the directory where the logs are being saved to.\n\n" +
                        "NOTES\n" +
                        "JLogger timestamps all messages using the following format: HourMinSecMilliSec where Hour, Min, and Sec are two digits and Millisec is up to three digits.\n" +
                        "When JLOgger saves, the first line in the file is always a header.\n" +
                        "JLogger displays the current status: " +
                        "\tA green strip behind the buttons indicates that JLogger is currently logging.\n" +
                        "\tA red strip behind the buttons indicates that JLogger is not currently logging.\n" +
                        "JLogger will start automatically logging at start up.";
        AboutJLoggerjTextArea.append(about);
        AboutJLoggerjTextArea.setCaretPosition(0);
        AboutJLoggerjTextArea.requestFocus();
        myDialog.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        OkButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AboutJLoggerjTextArea = new javax.swing.JTextArea();

        OkButton.setText("Ok");
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("About JLogger");

        AboutJLoggerjTextArea.setColumns(20);
        AboutJLoggerjTextArea.setEditable(false);
        AboutJLoggerjTextArea.setLineWrap(true);
        AboutJLoggerjTextArea.setRows(5);
        AboutJLoggerjTextArea.setWrapStyleWord(true);
        AboutJLoggerjTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AboutJLoggerjTextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(AboutJLoggerjTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1081, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(922, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1052, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator6, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(1012, Short.MAX_VALUE)
                .addComponent(OkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OkButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Private method to close the dialog when the user clicks ok
     * @param evt
     */
    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        myDialog.setVisible(false);
}//GEN-LAST:event_OkButtonActionPerformed

    /**
     * Action Listener to allow the user to press enter to exit (as ooposed to clicking ok button)
     * @param evt
     */
    private void AboutJLoggerjTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AboutJLoggerjTextAreaKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
           OkButton.doClick();
       }
    }//GEN-LAST:event_AboutJLoggerjTextAreaKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AboutJLoggerjTextArea;
    private javax.swing.JButton OkButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator6;
    // End of variables declaration//GEN-END:variables

}