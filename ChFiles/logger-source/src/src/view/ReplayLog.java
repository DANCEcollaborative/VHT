/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * replayLog.java
 *
 * Created on Mar 4, 2010, 11:53:12 PM
 */

package src.view;

import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import src.logic.LogManager;

/**
 *
 * @author sudeep
 */
public class ReplayLog extends javax.swing.JFrame {

    /** Creates new form replayLog */
    public ReplayLog() {
        initComponents();
    }

    /** Creates new form replayLog */
    public ReplayLog(LogManager logManager, File file) {
        initComponents();
        setFile(file);
        this.logManager = logManager;
        currentLogIndex = -1;
        paused = true;
        msgTimer = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        messageList = new javax.swing.JList();
        sendNexButton = new javax.swing.JButton();
        PlayPauseButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        ApplyFilterButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Replay Log");

        messageList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value instanceof String) {
                    return super.getListCellRendererComponent(list, makeHTML((String)value), index, isSelected, cellHasFocus);
                } else {
                    return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                }
            }
        });
        messageList.setModel(messagesList);
        jScrollPane1.setViewportView(messageList);

        sendNexButton.setText("Send Next");
        sendNexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendNexButtonActionPerformed(evt);
            }
        });

        PlayPauseButton.setText("Play");
        PlayPauseButton.setToolTipText("");
        PlayPauseButton.setAutoscrolls(true);
        PlayPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayPauseButtonActionPerformed(evt);
            }
        });

        ApplyFilterButton.setAutoscrolls(true);
        ApplyFilterButton.setLabel("Apply");
        ApplyFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyFilterButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.setToolTipText("");
        StopButton.setAutoscrolls(true);
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendNexButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayPauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ApplyFilterButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendNexButton)
                    .addComponent(PlayPauseButton)
                    .addComponent(ApplyFilterButton)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StopButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendNexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendNexButtonActionPerformed
        if(messageList.getSelectedIndex() != -1) {
            String message = (String)messageList.getSelectedValue();
            logManager.sendMessage(message);
            if (messageList.getSelectedIndex() + 1 < messageList.getModel().getSize()) {
                messageList.setSelectedIndex(messageList.getSelectedIndex() + 1);
            }
        }
    }//GEN-LAST:event_sendNexButtonActionPerformed

    public class ReplayTask extends TimerTask
    {
        private ReplayLog replayLog;
        public ReplayTask(ReplayLog ireplayLog)
        {
            this.replayLog = ireplayLog;
        }

        public void run()
        {
             int currentIndex = messageList.getSelectedIndex();
            String message = (String)messageList.getSelectedValue();
            logManager.sendMessage(message);

            currentIndex++;

            while(currentIndex < messagetimes.size())
            {
                messageList.setSelectedIndex(currentIndex);

                long t1 = (Integer) messagetimes.get(currentIndex);
                long t0 = (Integer) messagetimes.get(currentIndex - 1);
                long difference = (t1-t0);

                if(difference < 1)
                {
                    message = (String)messageList.getSelectedValue();
                    logManager.sendMessage(message);
                    currentIndex++;
                }
                else
                {
                     ReplayTask nextTask = new ReplayTask(this.replayLog);
                     msgTimer.schedule(nextTask, difference);
                     currentLogIndex = currentIndex;
                     break;
                }
            }
            if(currentIndex >= messagetimes.size())
            {
                currentLogIndex = -1;
                paused = true;
                if(msgTimer != null)
                {
                    msgTimer.purge();
                    msgTimer.cancel();
                }
                PlayPauseButton.setText("Play");               
            }
           
        }
    }


    


    private void PlayPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayPauseButtonActionPerformed
        // TODO add your handling code here:
        if(paused == true )
        {
            if(msgTimer == null)
            {
                msgTimer = new Timer();
                nextTask = new ReplayTask(this);
                currentLogIndex = messageList.getSelectedIndex();
                if(currentLogIndex == -1)
                {
                    currentLogIndex = 0;
                    messageList.setSelectedIndex(currentLogIndex);
                }
                msgTimer.schedule(nextTask, 1);
            }
            else
            {
                msgTimer.notify();
            }
            paused = false;
            PlayPauseButton.setText("Pause");
        }
        else
        {
           paused = true;
           PlayPauseButton.setText("Play");
           try
           {
               if(msgTimer != null)
               {
                    msgTimer.purge();
                    msgTimer.cancel();
                    msgTimer = null;
                    nextTask = null;
               }
           }
           catch (Exception e)
           {
               System.out.println(e);
           }
        }
    }//GEN-LAST:event_PlayPauseButtonActionPerformed

    private void ApplyFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyFilterButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ApplyFilterButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // TODO add your handling code here:
        currentLogIndex = -1;
        paused = true;
        if(msgTimer != null)
        {
            msgTimer.purge();
            msgTimer.cancel();
        }
        msgTimer = null;
        nextTask = null;
        PlayPauseButton.setText("Play");
    }//GEN-LAST:event_StopButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReplayLog().setVisible(true);
            }
        });
    }

    public void setFile(File file) {
        messagesList.clear();
        messagetimes.clear();
        try {
            Scanner scanner = new Scanner(file);
            scanner.useDelimiter("\\n");
            scanner.next(); // first token is about some logging information
            while(scanner.hasNext()) {
                String temp = scanner.next();
                Pattern p = Pattern.compile("^(\\d+).*?(.*)$");
                Matcher m = p.matcher(temp);
                if(m.find())
                {
                    String time = m.group(1);
                    String msg = m.group(2);
                    msg = msg.trim();
                    messagesList.addElement(msg);
                    messagesListArray.add(msg);
                    messagetimes.add(Integer.parseInt(time));
                }
            }
        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReplayLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setTitle("Replay Log - " + file.getAbsolutePath());
        messageList.setSelectedIndex(0);
    }

    // for multi-line labels in the JList
    private static String makeHTML(String str) {
        return "<html>" + str.replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll("\\n", "<br/>") + "</html>";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyFilterButton;
    private javax.swing.JButton PlayPauseButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList messageList;
    private javax.swing.JButton sendNexButton;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel    messagesList = new DefaultListModel();
    private ArrayList           messagetimes = new ArrayList<Integer>();
    private ArrayList           messagesListArray = new ArrayList<String>();
    private LogManager          logManager;
    private Timer               msgTimer;
    private ReplayTask          nextTask;

    private int                 currentLogIndex;
    private boolean             paused;
}
